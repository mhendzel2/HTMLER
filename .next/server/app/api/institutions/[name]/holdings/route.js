"use strict";(()=>{var t={};t.id=3675,t.ids=[3675],t.modules={399:t=>{t.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:t=>{t.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7862:(t,e,s)=>{s.r(e),s.d(e,{originalPathname:()=>h,patchFetch:()=>d,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>p,staticGenerationAsyncStorage:()=>k});var r={};s.r(r),s.d(r,{GET:()=>c});var a=s(9303),n=s(8716),o=s(670),i=s(7070),u=s(3139);async function c(t,{params:e}){try{let t=await u.uy.getInstitutionHoldings(e.name);return i.NextResponse.json(t)}catch(t){return console.error("Institution holdings API error:",t),i.NextResponse.json({error:"Failed to fetch institution holdings"},{status:500})}}let l=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/institutions/[name]/holdings/route",pathname:"/api/institutions/[name]/holdings",filename:"route",bundlePath:"app/api/institutions/[name]/holdings/route"},resolvedPagePath:"C:\\Users\\mjhen\\HTER\\HTMLER\\app\\api\\institutions\\[name]\\holdings\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:k,serverHooks:p}=l,h="/api/institutions/[name]/holdings/route";function d(){return(0,o.patchFetch)({serverHooks:p,staticGenerationAsyncStorage:k})}},3139:(t,e,s)=>{s.d(e,{uy:()=>i});let r=process.env.UNUSUAL_WHALES_API_BASE_URL||"https://api.unusualwhales.com",a=process.env.UNUSUAL_WHALES_API_KEY;class n extends Error{constructor(t,e,s){super(t),this.status=e,this.response=s,this.name="UnusualWhalesAPIError"}}class o{constructor(){this.rateLimitDelay=100}static getInstance(){return o.instance||(o.instance=new o),o.instance}getHeaders(){let t={Accept:"application/json","Content-Type":"application/json"};return a&&(t.Authorization=`Bearer ${a}`),t}buildUrl(t,e){let s=new URL(`/api${t}`,r);return e&&Object.entries(e).forEach(([t,e])=>{null!=e&&s.searchParams.append(t,String(e))}),s.toString()}async makeRequest(t,e={}){let{method:s="GET",params:r,cache:a="default"}=e;await new Promise(t=>setTimeout(t,this.rateLimitDelay));let o=this.buildUrl(t,r);try{let t=await fetch(o,{method:s,headers:this.getHeaders(),cache:a});if(!t.ok){let e=await t.text().catch(()=>"Unknown error");throw new n(`API request failed: ${t.status} ${t.statusText}`,t.status,e)}return await t.json()}catch(t){if(t instanceof n)throw t;throw new n(`Network error: ${t instanceof Error?t.message:"Unknown error"}`)}}async getMarketTide(t,e=!0,s=!1){let r={};return t&&(r.date=t),r.interval_5m=e,r.otm_only=s,this.makeRequest("/market/market-tide",{params:r,cache:"no-store"})}async getSectorTide(t,e){let s=`/market/${encodeURIComponent(t)}/sector-tide`,r={};return e&&(r.date=e),this.makeRequest(s,{params:r,cache:"no-store"})}async getMarketCorrelations(t,e){let s={};return t&&(s.start_date=t),e&&(s.end_date=e),this.makeRequest("/market/correlations",{params:s})}async getEarningsAfterHours(t,e=50,s=0){let r={limit:e,page:s};return t&&(r.date=t),this.makeRequest("/earnings/afterhours",{params:r})}async getEarningsPreMarket(t,e=50,s=0){let r={limit:e,page:s};return t&&(r.date=t),this.makeRequest("/earnings/premarket",{params:r})}async getEarningsHistorical(t){return this.makeRequest(`/earnings/${t}`)}async getOptionContract(t){return this.makeRequest(`/option-contract/${t}`)}async getOptionContractIntraday(t,e){let s={};return e&&(s.date=e),this.makeRequest(`/option-contract/${t}/intraday`,{params:s})}async getOptionContractVolumeProfile(t){return this.makeRequest(`/option-contract/${t}/volume-profile`)}async getStockOptionsData(t){return this.getStockFlowAlerts(t,!0,!0,50)}async getStockGreeks(t){return this.makeRequest(`/stock/${t}/greeks`)}async getStockOIPerStrike(t){return this.makeRequest(`/stock/${t}/oi-per-strike`)}async getStockOIPerExpiry(t){return this.makeRequest(`/stock/${t}/oi-per-expiry`)}async getStockOptionsVolume(t,e=1){return this.makeRequest(`/stock/${t}/options-volume`,{params:{limit:e}})}async getStockInfo(t){return this.makeRequest(`/stock/${t}`)}async getStockState(t){return this.makeRequest(`/stock/${t}/stock-state`)}async getStockNetPremTicks(t,e){let s={};return e&&(s.date=e),this.makeRequest(`/stock/${t}/net-prem-ticks`,{params:s})}async getStockFlowAlerts(t,e=!0,s=!0,r=100){try{let e=await this.makeRequest("/option-trades/flow-alerts",{params:{limit:2*r}});return e?.data?.data&&(e.data.data=e.data.data.filter(e=>e.underlying_symbol===t.toUpperCase())),e}catch(t){return this.makeRequest("/market/oi-change",{params:{limit:50,page:0}})}}async getFlowAlerts(t=50){return this.makeRequest("/option-trades/flow-alerts",{params:{limit:t}})}async getStockGEX(t){return this.makeRequest(`/stock/${t}/gex`)}async getStockGreekFlow(t,e,s){let r={};return e&&(r.date=e),s&&(r.expiry=s),this.makeRequest(`/stock/${t}/greek-flow`,{params:r})}async getStockMaxPain(t,e){let s={};return e&&(s.date=e),this.makeRequest(`/stock/${t}/max-pain`,{params:s})}async getStockNetPremTicksProcessed(t,e){try{let s=await this.getStockNetPremTicks(t,e);if(!s?.data?.data||!Array.isArray(s.data.data))return s;let{data:r}=s.data,a=["net_call_premium","net_call_volume","net_put_premium","net_put_volume"],n=[];return r.forEach((t,e)=>{t.net_call_premium=parseFloat(t.net_call_premium||"0"),t.net_put_premium=parseFloat(t.net_put_premium||"0"),t.net_call_volume=parseFloat(t.net_call_volume||"0"),t.net_put_volume=parseFloat(t.net_put_volume||"0"),0!==e&&a.forEach(s=>{t[s]=t[s]+n[e-1][s]}),n.push(t)}),{...s,data:{...s.data,data:n}}}catch(e){throw new n(`Failed to get processed net premium ticks for ${t}: ${e instanceof Error?e.message:"Unknown error"}`)}}async getCongressRecentTrades(t=100,e=0,s,r,a,n){let o={limit:t,offset:e};return s&&(o.start_date=s),r&&(o.end_date=r),a&&(o.ticker=a),n&&(o.congress_member=n),this.makeRequest("/congress/recent-trades",{params:o})}async getCongressTopTradedTickers(t=10,e,s){let r={limit:t};return e&&(r.start_date=e),s&&(r.end_date=s),this.makeRequest("/congress/top-traded-tickers",{params:r})}async getAlerts(t,e=!0,s=100,r=0,a,n){let o={intraday_only:e,limit:s,page:r};return t?.length&&t.forEach((t,e)=>{o[`config_ids[${e}]`]=t}),a?.length&&a.forEach((t,e)=>{o[`noti_types[${e}]`]=t}),n&&(o.ticker_symbols=n),this.makeRequest("/alerts",{params:o})}async getAlertConfigurations(){return this.makeRequest("/alerts/configuration")}async getNewsHeadlines(t=50,e=0,s,r,a){let n={limit:t,page:e};return s&&(n.start_date=s),r&&(n.end_date=r),a&&(n.ticker=a),this.makeRequest("/news/headlines",{params:n})}async getInstitutions(){return this.makeRequest("/institutions")}async getInstitutionHoldings(t){return this.makeRequest(`/institution/${encodeURIComponent(t)}/holdings`)}async getInstitutionActivity(t){return this.makeRequest(`/institution/${encodeURIComponent(t)}/activity`)}async getInstitutionSectors(t){return this.makeRequest(`/institution/${encodeURIComponent(t)}/sectors`)}async getETFInflowOutflow(t){return this.makeRequest(`/etfs/${t}/in_outflow`)}async getShortsData(t){return this.makeRequest(`/shorts/${t}/data`)}async getShortsVolumesByExchange(t){return this.makeRequest(`/shorts/${t}/volumes-by-exchange`)}async getShortsFTDs(t){return this.makeRequest(`/shorts/${t}/ftds`)}async getShortsInterestFloat(t){return this.makeRequest(`/shorts/${t}/interest-float`)}async getShortsVolumeAndRatio(t){return this.makeRequest(`/shorts/${t}/volume-and-ratio`)}async getMarketFDACalendar(t,e){let s={};return t&&(s.start_date=t),e&&(s.end_date=e),this.makeRequest("/market/fda-calendar",{params:s})}async getMarketOIChange(t=100,e=0){return this.makeRequest("/market/oi-change",{params:{limit:t,page:e}})}async getNetFlowExpiry(t,e,s,r){let a={};return t&&(a.ticker_symbol=t),e&&(a.tide_type=e),s&&(a.moneyness=s),r&&(a.expiry_category=r),this.makeRequest("/net-flow/expiry",{params:a})}async getStockInterpolatedIV(t,e){let s={};return e?.length&&e.forEach((t,e)=>{s[`days[${e}]`]=t}),this.makeRequest(`/stock/${t}/interpolated-iv`,{params:s})}async getStockNOPE(t){return this.makeRequest(`/stock/${t}/nope`)}async getStockSpotExposures(t,e,s){return e&&s?this.makeRequest(`/stock/${t}/spot-exposures/expiry-strike`,{params:{expiry:e,strike:s}}):this.makeRequest(`/stock/${t}/spot-exposures`)}async getDarkPoolData(t,e,s,r,a){let n={};return e&&(n.start_date=e),s&&(n.end_date=s),r&&(n.min_size=r),a&&(n.min_premium=a),this.makeRequest(`/stock/${t}/darkpool`,{params:n})}async getGroupFlowGreekFlow(t,e){let s=e?`/group-flow/${t}/greek-flow/${e}`:`/group-flow/${t}/greek-flow`;return this.makeRequest(s)}async getInstitutionLatestFilings(t=50,e=0){return this.makeRequest("/institution/latest_filings",{params:{limit:t,page:e}})}async getInstitutionOwnership(t){return this.makeRequest(`/institution/${t}/ownership`)}}let i=o.getInstance()}};var e=require("../../../../../webpack-runtime.js");e.C(t);var s=t=>e(e.s=t),r=e.X(0,[9276,5972],()=>s(7862));module.exports=r})();