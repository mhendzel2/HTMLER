"use strict";(()=>{var t={};t.id=8764,t.ids=[8764],t.modules={399:t=>{t.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:t=>{t.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7774:(t,e,r)=>{r.r(e),r.d(e,{originalPathname:()=>h,patchFetch:()=>g,requestAsyncStorage:()=>p,routeModule:()=>m,serverHooks:()=>d,staticGenerationAsyncStorage:()=>k});var s={};r.r(s),r.d(s,{GET:()=>l,dynamic:()=>u});var a=r(9303),n=r(8716),o=r(670),i=r(7070),c=r(3139);let u="force-dynamic";async function l(t,{params:e}){try{let r;let{searchParams:s}=new URL(t.url);switch(s.get("type")||"info"){case"info":r=await c.uy.getOptionContract(e.contractId);break;case"intraday":let a=s.get("date");r=await c.uy.getOptionContractIntraday(e.contractId,a||void 0);break;case"volume-profile":r=await c.uy.getOptionContractVolumeProfile(e.contractId);break;default:return i.NextResponse.json({error:"Invalid type parameter"},{status:400})}return i.NextResponse.json(r)}catch(t){return console.error("Option contract API error:",t),i.NextResponse.json({error:"Failed to fetch option contract data"},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/options/[contractId]/route",pathname:"/api/options/[contractId]",filename:"route",bundlePath:"app/api/options/[contractId]/route"},resolvedPagePath:"C:\\Users\\mjhen\\HTER\\HTMLER\\app\\api\\options\\[contractId]\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:k,serverHooks:d}=m,h="/api/options/[contractId]/route";function g(){return(0,o.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:k})}},3139:(t,e,r)=>{r.d(e,{uy:()=>i});let s=process.env.UNUSUAL_WHALES_API_BASE_URL||"https://api.unusualwhales.com",a=process.env.UNUSUAL_WHALES_API_KEY;class n extends Error{constructor(t,e,r){super(t),this.status=e,this.response=r,this.name="UnusualWhalesAPIError"}}class o{constructor(){this.rateLimitDelay=100}static getInstance(){return o.instance||(o.instance=new o),o.instance}getHeaders(){let t={Accept:"application/json","Content-Type":"application/json"};return a&&(t.Authorization=`Bearer ${a}`),t}buildUrl(t,e){let r=new URL(`/api${t}`,s);return e&&Object.entries(e).forEach(([t,e])=>{null!=e&&r.searchParams.append(t,String(e))}),r.toString()}async makeRequest(t,e={}){let{method:r="GET",params:s,cache:a="default"}=e;await new Promise(t=>setTimeout(t,this.rateLimitDelay));let o=this.buildUrl(t,s);try{let t=await fetch(o,{method:r,headers:this.getHeaders(),cache:a});if(!t.ok){let e=await t.text().catch(()=>"Unknown error");throw new n(`API request failed: ${t.status} ${t.statusText}`,t.status,e)}return await t.json()}catch(t){if(t instanceof n)throw t;throw new n(`Network error: ${t instanceof Error?t.message:"Unknown error"}`)}}async getMarketTide(t,e=!0,r=!1){let s={};return t&&(s.date=t),s.interval_5m=e,s.otm_only=r,this.makeRequest("/market/market-tide",{params:s,cache:"no-store"})}async getSectorTide(t,e){let r=`/market/${encodeURIComponent(t)}/sector-tide`,s={};return e&&(s.date=e),this.makeRequest(r,{params:s,cache:"no-store"})}async getMarketCorrelations(t,e){let r={};return t&&(r.start_date=t),e&&(r.end_date=e),this.makeRequest("/market/correlations",{params:r})}async getEarningsAfterHours(t,e=50,r=0){let s={limit:e,page:r};return t&&(s.date=t),this.makeRequest("/earnings/afterhours",{params:s})}async getEarningsPreMarket(t,e=50,r=0){let s={limit:e,page:r};return t&&(s.date=t),this.makeRequest("/earnings/premarket",{params:s})}async getEarningsHistorical(t){return this.makeRequest(`/earnings/${t}`)}async getOptionContract(t){return this.makeRequest(`/option-contract/${t}`)}async getOptionContractIntraday(t,e){let r={};return e&&(r.date=e),this.makeRequest(`/option-contract/${t}/intraday`,{params:r})}async getOptionContractVolumeProfile(t){return this.makeRequest(`/option-contract/${t}/volume-profile`)}async getStockOptionsData(t){return this.getStockFlowAlerts(t,!0,!0,50)}async getStockGreeks(t){return this.makeRequest(`/stock/${t}/greeks`)}async getStockOIPerStrike(t){return this.makeRequest(`/stock/${t}/oi-per-strike`)}async getStockOIPerExpiry(t){return this.makeRequest(`/stock/${t}/oi-per-expiry`)}async getStockOptionsVolume(t,e=1){return this.makeRequest(`/stock/${t}/options-volume`,{params:{limit:e}})}async getStockInfo(t){return this.makeRequest(`/stock/${t}`)}async getStockState(t){return this.makeRequest(`/stock/${t}/stock-state`)}async getStockNetPremTicks(t,e){let r={};return e&&(r.date=e),this.makeRequest(`/stock/${t}/net-prem-ticks`,{params:r})}async getStockFlowAlerts(t,e=!0,r=!0,s=100){try{let e=await this.makeRequest("/option-trades/flow-alerts",{params:{limit:2*s}});return e?.data?.data&&(e.data.data=e.data.data.filter(e=>e.underlying_symbol===t.toUpperCase())),e}catch(t){return this.makeRequest("/market/oi-change",{params:{limit:50,page:0}})}}async getFlowAlerts(t=50){return this.makeRequest("/option-trades/flow-alerts",{params:{limit:t}})}async getStockGEX(t){return this.makeRequest(`/stock/${t}/gex`)}async getStockGreekFlow(t,e,r){let s={};return e&&(s.date=e),r&&(s.expiry=r),this.makeRequest(`/stock/${t}/greek-flow`,{params:s})}async getStockMaxPain(t,e){let r={};return e&&(r.date=e),this.makeRequest(`/stock/${t}/max-pain`,{params:r})}async getStockNetPremTicksProcessed(t,e){try{let r=await this.getStockNetPremTicks(t,e);if(!r?.data?.data||!Array.isArray(r.data.data))return r;let{data:s}=r.data,a=["net_call_premium","net_call_volume","net_put_premium","net_put_volume"],n=[];return s.forEach((t,e)=>{t.net_call_premium=parseFloat(t.net_call_premium||"0"),t.net_put_premium=parseFloat(t.net_put_premium||"0"),t.net_call_volume=parseFloat(t.net_call_volume||"0"),t.net_put_volume=parseFloat(t.net_put_volume||"0"),0!==e&&a.forEach(r=>{t[r]=t[r]+n[e-1][r]}),n.push(t)}),{...r,data:{...r.data,data:n}}}catch(e){throw new n(`Failed to get processed net premium ticks for ${t}: ${e instanceof Error?e.message:"Unknown error"}`)}}async getCongressRecentTrades(t=100,e=0,r,s,a,n){let o={limit:t,offset:e};return r&&(o.start_date=r),s&&(o.end_date=s),a&&(o.ticker=a),n&&(o.congress_member=n),this.makeRequest("/congress/recent-trades",{params:o})}async getCongressTopTradedTickers(t=10,e,r){let s={limit:t};return e&&(s.start_date=e),r&&(s.end_date=r),this.makeRequest("/congress/top-traded-tickers",{params:s})}async getAlerts(t,e=!0,r=100,s=0,a,n){let o={intraday_only:e,limit:r,page:s};return t?.length&&t.forEach((t,e)=>{o[`config_ids[${e}]`]=t}),a?.length&&a.forEach((t,e)=>{o[`noti_types[${e}]`]=t}),n&&(o.ticker_symbols=n),this.makeRequest("/alerts",{params:o})}async getAlertConfigurations(){return this.makeRequest("/alerts/configuration")}async getNewsHeadlines(t=50,e=0,r,s,a){let n={limit:t,page:e};return r&&(n.start_date=r),s&&(n.end_date=s),a&&(n.ticker=a),this.makeRequest("/news/headlines",{params:n})}async getInstitutions(){return this.makeRequest("/institutions")}async getInstitutionHoldings(t){return this.makeRequest(`/institution/${encodeURIComponent(t)}/holdings`)}async getInstitutionActivity(t){return this.makeRequest(`/institution/${encodeURIComponent(t)}/activity`)}async getInstitutionSectors(t){return this.makeRequest(`/institution/${encodeURIComponent(t)}/sectors`)}async getETFInflowOutflow(t){return this.makeRequest(`/etfs/${t}/in_outflow`)}async getShortsData(t){return this.makeRequest(`/shorts/${t}/data`)}async getShortsVolumesByExchange(t){return this.makeRequest(`/shorts/${t}/volumes-by-exchange`)}async getShortsFTDs(t){return this.makeRequest(`/shorts/${t}/ftds`)}async getShortsInterestFloat(t){return this.makeRequest(`/shorts/${t}/interest-float`)}async getShortsVolumeAndRatio(t){return this.makeRequest(`/shorts/${t}/volume-and-ratio`)}async getMarketFDACalendar(t,e){let r={};return t&&(r.start_date=t),e&&(r.end_date=e),this.makeRequest("/market/fda-calendar",{params:r})}async getMarketOIChange(t=100,e=0){return this.makeRequest("/market/oi-change",{params:{limit:t,page:e}})}async getNetFlowExpiry(t,e,r,s){let a={};return t&&(a.ticker_symbol=t),e&&(a.tide_type=e),r&&(a.moneyness=r),s&&(a.expiry_category=s),this.makeRequest("/net-flow/expiry",{params:a})}async getStockInterpolatedIV(t,e){let r={};return e?.length&&e.forEach((t,e)=>{r[`days[${e}]`]=t}),this.makeRequest(`/stock/${t}/interpolated-iv`,{params:r})}async getStockNOPE(t){return this.makeRequest(`/stock/${t}/nope`)}async getStockSpotExposures(t,e,r){return e&&r?this.makeRequest(`/stock/${t}/spot-exposures/expiry-strike`,{params:{expiry:e,strike:r}}):this.makeRequest(`/stock/${t}/spot-exposures`)}async getDarkPoolData(t,e,r,s,a){let n={};return e&&(n.start_date=e),r&&(n.end_date=r),s&&(n.min_size=s),a&&(n.min_premium=a),this.makeRequest(`/stock/${t}/darkpool`,{params:n})}async getGroupFlowGreekFlow(t,e){let r=e?`/group-flow/${t}/greek-flow/${e}`:`/group-flow/${t}/greek-flow`;return this.makeRequest(r)}async getInstitutionLatestFilings(t=50,e=0){return this.makeRequest("/institution/latest_filings",{params:{limit:t,page:e}})}async getInstitutionOwnership(t){return this.makeRequest(`/institution/${t}/ownership`)}}let i=o.getInstance()}};var e=require("../../../../webpack-runtime.js");e.C(t);var r=t=>e(e.s=t),s=e.X(0,[9276,5972],()=>r(7774));module.exports=s})();