"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/news/route";
exports.ids = ["app/api/news/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_mjhen_HTER_HTMLER_app_api_news_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/news/route.ts */ \"(rsc)/./app/api/news/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/news/route\",\n        pathname: \"/api/news\",\n        filename: \"route\",\n        bundlePath: \"app/api/news/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\mjhen\\\\HTER\\\\HTMLER\\\\app\\\\api\\\\news\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_mjhen_HTER_HTMLER_app_api_news_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/news/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZuZXdzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZuZXdzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbmV3cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNtamhlbiU1Q0hURVIlNUNIVE1MRVIlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q21qaGVuJTVDSFRFUiU1Q0hUTUxFUiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDUTtBQUNyRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3VudXN1YWwtd2hhbGVzLWFuYWx5dGljcy8/N2IyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxtamhlblxcXFxIVEVSXFxcXEhUTUxFUlxcXFxhcHBcXFxcYXBpXFxcXG5ld3NcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL25ld3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9uZXdzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9uZXdzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcbWpoZW5cXFxcSFRFUlxcXFxIVE1MRVJcXFxcYXBwXFxcXGFwaVxcXFxuZXdzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9uZXdzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/news/route.ts":
/*!*******************************!*\
  !*** ./app/api/news/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_unusual_whales_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/unusual-whales-api */ \"(rsc)/./lib/unusual-whales-api.ts\");\n\n\n// Transform raw API data to match frontend expectations\nfunction transformNewsItem(item) {\n    return {\n        id: item.id || `${item.source}-${item.created_at}-${Math.random().toString(36).substr(2, 9)}`,\n        title: item.headline || item.title || \"No title available\",\n        description: item.summary || item.description || item.content || null,\n        url: item.url || item.link || null,\n        source: item.source || \"Unusual Whales\",\n        published_at: item.created_at || item.published_at || new Date().toISOString(),\n        ticker_symbols: item.tickers || item.symbols || [],\n        sentiment: item.sentiment || \"neutral\",\n        relevance_score: item.is_major ? 0.8 : 0.5\n    };\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\");\n        const page = parseInt(searchParams.get(\"page\") || \"0\");\n        const startDate = searchParams.get(\"start_date\") || undefined;\n        const endDate = searchParams.get(\"end_date\") || undefined;\n        const ticker = searchParams.get(\"ticker\") || undefined;\n        const rawData = await _lib_unusual_whales_api__WEBPACK_IMPORTED_MODULE_1__.unusualWhalesAPI.getNewsHeadlines(limit, page, startDate, endDate, ticker);\n        // Transform the raw data to match frontend expectations\n        const newsItems = (rawData.data || rawData || []).map(transformNewsItem);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(newsItems);\n    } catch (error) {\n        console.error(\"News API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch news headlines\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL25ld3Mvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ3dEO0FBQ0k7QUFjNUQsd0RBQXdEO0FBQ3hELFNBQVNFLGtCQUFrQkMsSUFBUztJQUNsQyxPQUFPO1FBQ0xDLElBQUlELEtBQUtDLEVBQUUsSUFBSSxDQUFDLEVBQUVELEtBQUtFLE1BQU0sQ0FBQyxDQUFDLEVBQUVGLEtBQUtHLFVBQVUsQ0FBQyxDQUFDLEVBQUVDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3RkMsT0FBT1IsS0FBS1MsUUFBUSxJQUFJVCxLQUFLUSxLQUFLLElBQUk7UUFDdENFLGFBQWFWLEtBQUtXLE9BQU8sSUFBSVgsS0FBS1UsV0FBVyxJQUFJVixLQUFLWSxPQUFPLElBQUk7UUFDakVDLEtBQUtiLEtBQUthLEdBQUcsSUFBSWIsS0FBS2MsSUFBSSxJQUFJO1FBQzlCWixRQUFRRixLQUFLRSxNQUFNLElBQUk7UUFDdkJhLGNBQWNmLEtBQUtHLFVBQVUsSUFBSUgsS0FBS2UsWUFBWSxJQUFJLElBQUlDLE9BQU9DLFdBQVc7UUFDNUVDLGdCQUFnQmxCLEtBQUttQixPQUFPLElBQUluQixLQUFLb0IsT0FBTyxJQUFJLEVBQUU7UUFDbERDLFdBQVdyQixLQUFLcUIsU0FBUyxJQUFJO1FBQzdCQyxpQkFBaUJ0QixLQUFLdUIsUUFBUSxHQUFHLE1BQU07SUFDekM7QUFDRjtBQUVPLGVBQWVDLElBQUlDLE9BQW9CO0lBQzVDLElBQUk7UUFDRixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHLElBQUlDLElBQUlGLFFBQVFaLEdBQUc7UUFDNUMsTUFBTWUsUUFBUUMsU0FBU0gsYUFBYUksR0FBRyxDQUFDLFlBQVk7UUFDcEQsTUFBTUMsT0FBT0YsU0FBU0gsYUFBYUksR0FBRyxDQUFDLFdBQVc7UUFDbEQsTUFBTUUsWUFBWU4sYUFBYUksR0FBRyxDQUFDLGlCQUFpQkc7UUFDcEQsTUFBTUMsVUFBVVIsYUFBYUksR0FBRyxDQUFDLGVBQWVHO1FBQ2hELE1BQU1FLFNBQVNULGFBQWFJLEdBQUcsQ0FBQyxhQUFhRztRQUU3QyxNQUFNRyxVQUFlLE1BQU10QyxxRUFBZ0JBLENBQUN1QyxnQkFBZ0IsQ0FDMURULE9BQ0FHLE1BQ0FDLFdBQ0FFLFNBQ0FDO1FBR0Ysd0RBQXdEO1FBQ3hELE1BQU1HLFlBQXdCLENBQUNGLFFBQVFHLElBQUksSUFBSUgsV0FBVyxFQUFFLEVBQUVJLEdBQUcsQ0FBQ3pDO1FBRWxFLE9BQU9GLHFEQUFZQSxDQUFDNEMsSUFBSSxDQUFDSDtJQUMzQixFQUFFLE9BQU9JLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLG1CQUFtQkE7UUFDakMsT0FBTzdDLHFEQUFZQSxDQUFDNEMsSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQWlDLEdBQzFDO1lBQUVFLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW51c3VhbC13aGFsZXMtYW5hbHl0aWNzLy4vYXBwL2FwaS9uZXdzL3JvdXRlLnRzPzY5MmEiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IHVudXN1YWxXaGFsZXNBUEkgfSBmcm9tICdAL2xpYi91bnVzdWFsLXdoYWxlcy1hcGknO1xyXG5cclxuaW50ZXJmYWNlIE5ld3NJdGVtIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgdXJsPzogc3RyaW5nO1xyXG4gIHNvdXJjZTogc3RyaW5nO1xyXG4gIHB1Ymxpc2hlZF9hdDogc3RyaW5nO1xyXG4gIHRpY2tlcl9zeW1ib2xzOiBzdHJpbmdbXTtcclxuICBzZW50aW1lbnQ6ICdwb3NpdGl2ZScgfCAnbmVnYXRpdmUnIHwgJ25ldXRyYWwnO1xyXG4gIHJlbGV2YW5jZV9zY29yZT86IG51bWJlcjtcclxufVxyXG5cclxuLy8gVHJhbnNmb3JtIHJhdyBBUEkgZGF0YSB0byBtYXRjaCBmcm9udGVuZCBleHBlY3RhdGlvbnNcclxuZnVuY3Rpb24gdHJhbnNmb3JtTmV3c0l0ZW0oaXRlbTogYW55KTogTmV3c0l0ZW0ge1xyXG4gIHJldHVybiB7XHJcbiAgICBpZDogaXRlbS5pZCB8fCBgJHtpdGVtLnNvdXJjZX0tJHtpdGVtLmNyZWF0ZWRfYXR9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWAsXHJcbiAgICB0aXRsZTogaXRlbS5oZWFkbGluZSB8fCBpdGVtLnRpdGxlIHx8ICdObyB0aXRsZSBhdmFpbGFibGUnLFxyXG4gICAgZGVzY3JpcHRpb246IGl0ZW0uc3VtbWFyeSB8fCBpdGVtLmRlc2NyaXB0aW9uIHx8IGl0ZW0uY29udGVudCB8fCBudWxsLFxyXG4gICAgdXJsOiBpdGVtLnVybCB8fCBpdGVtLmxpbmsgfHwgbnVsbCxcclxuICAgIHNvdXJjZTogaXRlbS5zb3VyY2UgfHwgJ1VudXN1YWwgV2hhbGVzJyxcclxuICAgIHB1Ymxpc2hlZF9hdDogaXRlbS5jcmVhdGVkX2F0IHx8IGl0ZW0ucHVibGlzaGVkX2F0IHx8IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgIHRpY2tlcl9zeW1ib2xzOiBpdGVtLnRpY2tlcnMgfHwgaXRlbS5zeW1ib2xzIHx8IFtdLFxyXG4gICAgc2VudGltZW50OiBpdGVtLnNlbnRpbWVudCB8fCAnbmV1dHJhbCcsXHJcbiAgICByZWxldmFuY2Vfc2NvcmU6IGl0ZW0uaXNfbWFqb3IgPyAwLjggOiAwLjVcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuICAgIGNvbnN0IGxpbWl0ID0gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSB8fCAnNTAnKTtcclxuICAgIGNvbnN0IHBhZ2UgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdwYWdlJykgfHwgJzAnKTtcclxuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHNlYXJjaFBhcmFtcy5nZXQoJ3N0YXJ0X2RhdGUnKSB8fCB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBlbmREYXRlID0gc2VhcmNoUGFyYW1zLmdldCgnZW5kX2RhdGUnKSB8fCB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCB0aWNrZXIgPSBzZWFyY2hQYXJhbXMuZ2V0KCd0aWNrZXInKSB8fCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3QgcmF3RGF0YTogYW55ID0gYXdhaXQgdW51c3VhbFdoYWxlc0FQSS5nZXROZXdzSGVhZGxpbmVzKFxyXG4gICAgICBsaW1pdCxcclxuICAgICAgcGFnZSxcclxuICAgICAgc3RhcnREYXRlLFxyXG4gICAgICBlbmREYXRlLFxyXG4gICAgICB0aWNrZXJcclxuICAgICk7XHJcblxyXG4gICAgLy8gVHJhbnNmb3JtIHRoZSByYXcgZGF0YSB0byBtYXRjaCBmcm9udGVuZCBleHBlY3RhdGlvbnNcclxuICAgIGNvbnN0IG5ld3NJdGVtczogTmV3c0l0ZW1bXSA9IChyYXdEYXRhLmRhdGEgfHwgcmF3RGF0YSB8fCBbXSkubWFwKHRyYW5zZm9ybU5ld3NJdGVtKTtcclxuXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24obmV3c0l0ZW1zKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignTmV3cyBBUEkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIG5ld3MgaGVhZGxpbmVzJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJ1bnVzdWFsV2hhbGVzQVBJIiwidHJhbnNmb3JtTmV3c0l0ZW0iLCJpdGVtIiwiaWQiLCJzb3VyY2UiLCJjcmVhdGVkX2F0IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwidGl0bGUiLCJoZWFkbGluZSIsImRlc2NyaXB0aW9uIiwic3VtbWFyeSIsImNvbnRlbnQiLCJ1cmwiLCJsaW5rIiwicHVibGlzaGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidGlja2VyX3N5bWJvbHMiLCJ0aWNrZXJzIiwic3ltYm9scyIsInNlbnRpbWVudCIsInJlbGV2YW5jZV9zY29yZSIsImlzX21ham9yIiwiR0VUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsImxpbWl0IiwicGFyc2VJbnQiLCJnZXQiLCJwYWdlIiwic3RhcnREYXRlIiwidW5kZWZpbmVkIiwiZW5kRGF0ZSIsInRpY2tlciIsInJhd0RhdGEiLCJnZXROZXdzSGVhZGxpbmVzIiwibmV3c0l0ZW1zIiwiZGF0YSIsIm1hcCIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/news/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/unusual-whales-api.ts":
/*!***********************************!*\
  !*** ./lib/unusual-whales-api.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnusualWhalesAPI: () => (/* binding */ UnusualWhalesAPI),\n/* harmony export */   UnusualWhalesAPIError: () => (/* binding */ UnusualWhalesAPIError),\n/* harmony export */   unusualWhalesAPI: () => (/* binding */ unusualWhalesAPI)\n/* harmony export */ });\nconst API_BASE_URL = process.env.UNUSUAL_WHALES_API_BASE_URL || \"https://api.unusualwhales.com\";\nconst API_KEY = process.env.UNUSUAL_WHALES_API_KEY;\nclass UnusualWhalesAPIError extends Error {\n    constructor(message, status, response){\n        super(message);\n        this.status = status;\n        this.response = response;\n        this.name = \"UnusualWhalesAPIError\";\n    }\n}\nclass UnusualWhalesAPI {\n    constructor(){\n        this.rateLimitDelay = 100 // 10 requests per second\n        ;\n    }\n    static getInstance() {\n        if (!UnusualWhalesAPI.instance) {\n            UnusualWhalesAPI.instance = new UnusualWhalesAPI();\n        }\n        return UnusualWhalesAPI.instance;\n    }\n    getHeaders() {\n        const headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        };\n        if (API_KEY) {\n            headers[\"Authorization\"] = `Bearer ${API_KEY}`;\n        }\n        return headers;\n    }\n    buildUrl(endpoint, params) {\n        const url = new URL(`/api${endpoint}`, API_BASE_URL);\n        if (params) {\n            Object.entries(params).forEach(([key, value])=>{\n                if (value !== undefined && value !== null) {\n                    url.searchParams.append(key, String(value));\n                }\n            });\n        }\n        return url.toString();\n    }\n    async makeRequest(endpoint, options = {}) {\n        const { method = \"GET\", params, cache = \"default\" } = options;\n        // Rate limiting\n        await new Promise((resolve)=>setTimeout(resolve, this.rateLimitDelay));\n        const url = this.buildUrl(endpoint, params);\n        try {\n            const response = await fetch(url, {\n                method,\n                headers: this.getHeaders(),\n                cache\n            });\n            if (!response.ok) {\n                const errorText = await response.text().catch(()=>\"Unknown error\");\n                throw new UnusualWhalesAPIError(`API request failed: ${response.status} ${response.statusText}`, response.status, errorText);\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            if (error instanceof UnusualWhalesAPIError) {\n                throw error;\n            }\n            throw new UnusualWhalesAPIError(`Network error: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    // Market Endpoints\n    async getMarketTide(date, interval5m = true, otmOnly = false) {\n        const endpoint = \"/market/market-tide\";\n        const params = {};\n        if (date) params.date = date;\n        params.interval_5m = interval5m;\n        params.otm_only = otmOnly;\n        return this.makeRequest(endpoint, {\n            params,\n            cache: \"no-store\"\n        });\n    }\n    async getSectorTide(sector, date) {\n        const endpoint = `/market/${encodeURIComponent(sector)}/sector-tide`;\n        const params = {};\n        if (date) params.date = date;\n        return this.makeRequest(endpoint, {\n            params,\n            cache: \"no-store\"\n        });\n    }\n    async getMarketCorrelations(startDate, endDate) {\n        const params = {};\n        if (startDate) params.start_date = startDate;\n        if (endDate) params.end_date = endDate;\n        return this.makeRequest(\"/market/correlations\", {\n            params\n        });\n    }\n    // Earnings Endpoints\n    async getEarningsAfterHours(date, limit = 50, page = 0) {\n        const params = {\n            limit,\n            page\n        };\n        if (date) params.date = date;\n        return this.makeRequest(\"/earnings/afterhours\", {\n            params\n        });\n    }\n    async getEarningsPreMarket(date, limit = 50, page = 0) {\n        const params = {\n            limit,\n            page\n        };\n        if (date) params.date = date;\n        return this.makeRequest(\"/earnings/premarket\", {\n            params\n        });\n    }\n    async getEarningsHistorical(ticker) {\n        return this.makeRequest(`/earnings/${ticker}`);\n    }\n    // Options Endpoints\n    async getOptionContract(contractId) {\n        return this.makeRequest(`/option-contract/${contractId}`);\n    }\n    async getOptionContractIntraday(contractId, date) {\n        const params = {};\n        if (date) params.date = date;\n        return this.makeRequest(`/option-contract/${contractId}/intraday`, {\n            params\n        });\n    }\n    async getOptionContractVolumeProfile(contractId) {\n        return this.makeRequest(`/option-contract/${contractId}/volume-profile`);\n    }\n    async getStockOptionsData(ticker) {\n        // Since /stock/{ticker}/options doesn't exist, use flow-alerts as an alternative\n        // This will give us recent options activity for the ticker\n        return this.getStockFlowAlerts(ticker, true, true, 50);\n    }\n    async getStockGreeks(ticker) {\n        return this.makeRequest(`/stock/${ticker}/greeks`);\n    }\n    async getStockOIPerStrike(ticker) {\n        return this.makeRequest(`/stock/${ticker}/oi-per-strike`);\n    }\n    async getStockOIPerExpiry(ticker) {\n        return this.makeRequest(`/stock/${ticker}/oi-per-expiry`);\n    }\n    async getStockOptionsVolume(ticker, limit = 1) {\n        const params = {\n            limit\n        };\n        return this.makeRequest(`/stock/${ticker}/options-volume`, {\n            params\n        });\n    }\n    // Stock Endpoints\n    async getStockInfo(ticker) {\n        return this.makeRequest(`/stock/${ticker}`);\n    }\n    async getStockState(ticker) {\n        return this.makeRequest(`/stock/${ticker}/stock-state`);\n    }\n    async getStockNetPremTicks(ticker, date) {\n        const params = {};\n        if (date) params.date = date;\n        return this.makeRequest(`/stock/${ticker}/net-prem-ticks`, {\n            params\n        });\n    }\n    // GEX and Flow Analytics Endpoints\n    async getStockFlowAlerts(ticker, isAskSide = true, isBidSide = true, limit = 100) {\n        // Since /stock/{ticker}/flow-alerts doesn't exist, use general flow alerts and filter\n        const params = {\n            limit: limit * 2 // Get more to account for filtering\n        };\n        try {\n            const response = await this.makeRequest(\"/option-trades/flow-alerts\", {\n                params\n            });\n            // Filter the results by ticker if we got data\n            if (response?.data?.data) {\n                response.data.data = response.data.data.filter((alert)=>alert.underlying_symbol === ticker.toUpperCase());\n            }\n            return response;\n        } catch (error) {\n            // Fallback to using OI changes which is known to work\n            return this.makeRequest(\"/market/oi-change\", {\n                params: {\n                    limit: 50,\n                    page: 0\n                }\n            });\n        }\n    }\n    async getFlowAlerts(limit = 50) {\n        const params = {\n            limit\n        };\n        return this.makeRequest(\"/option-trades/flow-alerts\", {\n            params\n        });\n    }\n    async getStockGEX(ticker) {\n        return this.makeRequest(`/stock/${ticker}/gex`);\n    }\n    async getStockGreekFlow(ticker, date, expiry) {\n        const params = {};\n        if (date) params.date = date;\n        if (expiry) params.expiry = expiry;\n        return this.makeRequest(`/stock/${ticker}/greek-flow`, {\n            params\n        });\n    }\n    async getStockMaxPain(ticker, date) {\n        const params = {};\n        if (date) params.date = date;\n        return this.makeRequest(`/stock/${ticker}/max-pain`, {\n            params\n        });\n    }\n    // Enhanced Net Premium Analysis with cumulative calculation\n    async getStockNetPremTicksProcessed(ticker, date) {\n        try {\n            const response = await this.getStockNetPremTicks(ticker, date);\n            if (!response?.data?.data || !Array.isArray(response.data.data)) {\n                return response;\n            }\n            const { data } = response.data;\n            const fieldsToSum = [\n                \"net_call_premium\",\n                \"net_call_volume\",\n                \"net_put_premium\",\n                \"net_put_volume\"\n            ];\n            let result = [];\n            data.forEach((tick, idx)=>{\n                // Parse numeric values\n                tick.net_call_premium = parseFloat(tick.net_call_premium || \"0\");\n                tick.net_put_premium = parseFloat(tick.net_put_premium || \"0\");\n                tick.net_call_volume = parseFloat(tick.net_call_volume || \"0\");\n                tick.net_put_volume = parseFloat(tick.net_put_volume || \"0\");\n                // Add cumulative data from previous tick\n                if (idx !== 0) {\n                    fieldsToSum.forEach((field)=>{\n                        tick[field] = tick[field] + result[idx - 1][field];\n                    });\n                }\n                result.push(tick);\n            });\n            return {\n                ...response,\n                data: {\n                    ...response.data,\n                    data: result\n                }\n            };\n        } catch (error) {\n            throw new UnusualWhalesAPIError(`Failed to get processed net premium ticks for ${ticker}: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    // Congress Endpoints\n    async getCongressRecentTrades(limit = 100, offset = 0, startDate, endDate, ticker, congressMember) {\n        const params = {\n            limit,\n            offset\n        };\n        if (startDate) params.start_date = startDate;\n        if (endDate) params.end_date = endDate;\n        if (ticker) params.ticker = ticker;\n        if (congressMember) params.congress_member = congressMember;\n        return this.makeRequest(\"/congress/recent-trades\", {\n            params\n        });\n    }\n    async getCongressTopTradedTickers(limit = 10, startDate, endDate) {\n        const params = {\n            limit\n        };\n        if (startDate) params.start_date = startDate;\n        if (endDate) params.end_date = endDate;\n        return this.makeRequest(\"/congress/top-traded-tickers\", {\n            params\n        });\n    }\n    // Alerts Endpoints\n    async getAlerts(configIds, intradayOnly = true, limit = 100, page = 0, notiTypes, tickerSymbols) {\n        const params = {\n            intraday_only: intradayOnly,\n            limit,\n            page\n        };\n        if (configIds?.length) {\n            configIds.forEach((id, index)=>{\n                params[`config_ids[${index}]`] = id;\n            });\n        }\n        if (notiTypes?.length) {\n            notiTypes.forEach((type, index)=>{\n                params[`noti_types[${index}]`] = type;\n            });\n        }\n        if (tickerSymbols) {\n            params.ticker_symbols = tickerSymbols;\n        }\n        return this.makeRequest(\"/alerts\", {\n            params\n        });\n    }\n    async getAlertConfigurations() {\n        return this.makeRequest(\"/alerts/configuration\");\n    }\n    // News Endpoints\n    async getNewsHeadlines(limit = 50, page = 0, startDate, endDate, ticker) {\n        const params = {\n            limit,\n            page\n        };\n        if (startDate) params.start_date = startDate;\n        if (endDate) params.end_date = endDate;\n        if (ticker) params.ticker = ticker;\n        return this.makeRequest(\"/news/headlines\", {\n            params\n        });\n    }\n    // Institution Endpoints\n    async getInstitutions() {\n        return this.makeRequest(\"/institutions\");\n    }\n    async getInstitutionHoldings(name) {\n        return this.makeRequest(`/institution/${encodeURIComponent(name)}/holdings`);\n    }\n    async getInstitutionActivity(name) {\n        return this.makeRequest(`/institution/${encodeURIComponent(name)}/activity`);\n    }\n    async getInstitutionSectors(name) {\n        return this.makeRequest(`/institution/${encodeURIComponent(name)}/sectors`);\n    }\n    // ETF Endpoints\n    async getETFInflowOutflow(ticker) {\n        return this.makeRequest(`/etfs/${ticker}/in_outflow`);\n    }\n    // Shorts Endpoints\n    async getShortsData(ticker) {\n        return this.makeRequest(`/shorts/${ticker}/data`);\n    }\n    async getShortsVolumesByExchange(ticker) {\n        return this.makeRequest(`/shorts/${ticker}/volumes-by-exchange`);\n    }\n    async getShortsFTDs(ticker) {\n        return this.makeRequest(`/shorts/${ticker}/ftds`);\n    }\n    async getShortsInterestFloat(ticker) {\n        return this.makeRequest(`/shorts/${ticker}/interest-float`);\n    }\n    async getShortsVolumeAndRatio(ticker) {\n        return this.makeRequest(`/shorts/${ticker}/volume-and-ratio`);\n    }\n    // Additional Market Endpoints\n    async getMarketFDACalendar(startDate, endDate) {\n        const params = {};\n        if (startDate) params.start_date = startDate;\n        if (endDate) params.end_date = endDate;\n        return this.makeRequest(\"/market/fda-calendar\", {\n            params\n        });\n    }\n    async getMarketOIChange(limit = 100, page = 0) {\n        const params = {\n            limit,\n            page\n        };\n        return this.makeRequest(\"/market/oi-change\", {\n            params\n        });\n    }\n    async getNetFlowExpiry(tickerSymbol, tideType, moneyness, expiryCategory) {\n        const params = {};\n        if (tickerSymbol) params.ticker_symbol = tickerSymbol;\n        if (tideType) params.tide_type = tideType;\n        if (moneyness) params.moneyness = moneyness;\n        if (expiryCategory) params.expiry_category = expiryCategory;\n        return this.makeRequest(\"/net-flow/expiry\", {\n            params\n        });\n    }\n    // Stock Advanced Endpoints\n    async getStockInterpolatedIV(ticker, days) {\n        const params = {};\n        if (days?.length) {\n            days.forEach((day, index)=>{\n                params[`days[${index}]`] = day;\n            });\n        }\n        return this.makeRequest(`/stock/${ticker}/interpolated-iv`, {\n            params\n        });\n    }\n    async getStockNOPE(ticker) {\n        return this.makeRequest(`/stock/${ticker}/nope`);\n    }\n    async getStockSpotExposures(ticker, expiry, strike) {\n        if (expiry && strike) {\n            return this.makeRequest(`/stock/${ticker}/spot-exposures/expiry-strike`, {\n                params: {\n                    expiry: expiry,\n                    strike: strike\n                }\n            });\n        }\n        return this.makeRequest(`/stock/${ticker}/spot-exposures`);\n    }\n    // Dark Pool / Off-Lit Endpoints\n    async getDarkPoolData(ticker, startDate, endDate, minSize, minPremium) {\n        const params = {};\n        if (startDate) params.start_date = startDate;\n        if (endDate) params.end_date = endDate;\n        if (minSize) params.min_size = minSize;\n        if (minPremium) params.min_premium = minPremium;\n        return this.makeRequest(`/stock/${ticker}/darkpool`, {\n            params\n        });\n    }\n    // Group Flow Endpoints\n    async getGroupFlowGreekFlow(flowGroup, expiry) {\n        const endpoint = expiry ? `/group-flow/${flowGroup}/greek-flow/${expiry}` : `/group-flow/${flowGroup}/greek-flow`;\n        return this.makeRequest(endpoint);\n    }\n    // Institution Advanced Endpoints\n    async getInstitutionLatestFilings(limit = 50, page = 0) {\n        const params = {\n            limit,\n            page\n        };\n        return this.makeRequest(\"/institution/latest_filings\", {\n            params\n        });\n    }\n    async getInstitutionOwnership(ticker) {\n        return this.makeRequest(`/institution/${ticker}/ownership`);\n    }\n}\nconst unusualWhalesAPI = UnusualWhalesAPI.getInstance();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/unusual-whales-api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmjhen%5CHTER%5CHTMLER&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();